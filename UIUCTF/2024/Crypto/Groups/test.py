import numpy as np
from random import randint
from math import gcd
from challenge import generate_challenge
import ssl
import socket

def generate_challenge(c):
    a = randint(2, c - 1)
    while gcd(a, c) != 1:
        a = randint(2, c - 1)
    k = randint(2, c - 1)
    return (a, pow(a, k, c), k)


C = 2887148238050771212671429597130393991977609459279722700926516024197432303799152733116328983144639225941977803110929349655578418949441740933805615113979999421542416933972905423711002751042080134966731755152859226962916775325475044445856101949404200039904432116776619949629539250452698719329070373564032273701278453899126120309244841494728976885406024976768122077071687938121709811322297802059565867
K = 0
URL = "groups.chal.uiuc.tf"
PORT = 1337

if __name__ == '__main__':
    # Create a socket object
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # Wrap the socket with SSL
    context = ssl.create_default_context()
    ssl_socket = context.wrap_socket(client_socket, server_hostname=URL)

    try:
        # Connect to the server
        ssl_socket.connect((URL, PORT))
        print(f"Connected to server {URL} on port {PORT}\n")

        # input 1
        print("INPUT 1:")
        response1 = ssl_socket.recv(4096)
        answer1 = str(C) + "\n"
        ssl_socket.sendall(answer1.encode())
        print(f"{response1.decode()}{answer1}")
        print("\n\n")


        # Receive challenge from server
        print("CHALLENGE:")
        response2 = ssl_socket.recv(4096)
        responsev = response2.decode().split("\n")
        print(responsev[0])
        print(responsev[1])
        print("\n\n")


        # input 2
        print("INPUT 2:")
        print(responsev[2])


    except Exception as e:
        print(f"An error occurred: {e}")

# 2887148238050771212671429597130393991977609459279722700926516024197432303799152733116328983144639225941977803110929349655578418949441740933805615113979999421542416933972905423711002751042080134966731755152859226962916775325475044445856101949404200039904432116776619949629539250452698719329070373564032273701278453899126120309244841494728976885406024976768122077071687938121709811322297802059565867
# 2537491167761560367831141299128299023435522653100042023928393969423363259179922003502999291314525773621652129660409209695545741636049017842279862224645800145701647658016375011914447019222539626453699597870592945541618128745286194827060271428173984548625703791153516582520577044922290865097629066407143697059017201432029205790530926717433317156578032058832250062858400001812543342884580096439778907
# 287377483064695636378578615911594454339140106591700030134461106585427673506962885825853755999574394191572090900670887947309667664676600107935258488338402648522496402254719850218226868609848014138147475580368359447542424552788967699754675551973267034158062414013597244483243788983428183884311453165851422298393445525475248579596612647250235749746656018133486628143454205710693838801323761355790995