import hashlib
import itertools
import sys  # Import sys to use sys.stdout.flush()

# Coefficients obtained from the original polynomial
# coeffs = [51862623363251592162508517414206794722184767070638202339849823866691337237984, 37382279584575671665412736907293996338695993273870192478675632069138612724862, 54922548012150305957596790093591596584466927559339793497872781061995644787934, 78252810134582863205690878209501272813895928209727562041762503202357420752872, 42828444749577646348433379946210116268681295505955485156998041972023283883825, 16605552275238206773988750913306730384585706182539455749829662274657349564685, 10009681240064642703458239750230614173777134131788316383198404412696086812123, 78645989056858155953548111309497253790838184388240819797824701948971210482613, 4244268215373067710299345981438357655695365045434952475766578691548900068884, 4587316730151077745530345853110346550953429707066041958662730783235705675823, 98676420105970876355731743378079563095438931888109560800924537433679751968410, 15596341609452054024790211046165535925702287406391095849367220616094959319247, 32403908412257070302225532346590438994349383666861558172214850130936584778364, 115533839068795212658451397535765278473898133068309149603041276877934373391258, 7092396080272228853132842491037895182885372693653833621714864119915575351959, 66681440692524165569992671994842901187406728987456386756946647843877275534778, 43594818259201189283635356607462328520192502107771693650896092861477784342431, 91842050171741174464568525719602040646922469791657773826919079592778110767648, 105484582062398143020926667398250530293520625898492636870365251172877956081489, 48478433129988933656911497337570454952912987663301800112434018755270886790086, 9286536496641678624961072298289256247776902880262474453231051084428770229931, 71177914266346294875020009514904614231152252028035180341047573071890295627281, 58688474918974956495962699109478986243962548972465028067725936901754910032197, 91356407137791927144958613770622174607926961061379368852376771002781151613901]
coeffs = [51862623363251592162508517414206794722184767070638202339849823866691337237984, 37382279584575671665412736907293996338695993273870192478675632069138612724862, 54922548012150305957596790093591596584466927559339793497872781061995644787934, 78252810134582863205690878209501272813895928209727562041762503202357420752872, 42828444749577646348433379946210116268681295505955485156998041972023283883825, 16605552275238206773988750913306730384585706182539455749829662274657349564685, 10009681240064642703458239750230614173777134131788316383198404412696086812123, 78645989056858155953548111309497253790838184388240819797824701948971210482613, 4244268215373067710299345981438357655695365045434952475766578691548900068884, 4587316730151077745530345853110346550953429707066041958662730783235705675823, 98676420105970876355731743378079563095438931888109560800924537433679751968410, 15596341609452054024790211046165535925702287406391095849367220616094959319247, 32403908412257070302225532346590438994349383666861558172214850130936584778364, 115533839068795212658451397535765278473898133068309149603041276877934373391258, 7092396080272228853132842491037895182885372693653833621714864119915575351959, 66681440692524165569992671994842901187406728987456386756946647843877275534778, 43594818259201189283635356607462328520192502107771693650896092861477784342431, 91842050171741174464568525719602040646922469791657773826919079592778110767648, 105484582062398143020926667398250530293520625898492636870365251172877956081489, 48478433129988933656911497337570454952912987663301800112434018755270886790086, 9286536496641678624961072298289256247776902880262474453231051084428770229931, 71177914266346294875020009514904614231152252028035180341047573071890295627281, 58688474918974956495962699109478986243962548972465028067725936901754910032197, 91356407137791927144958613770622174607926961061379368852376771002781151613901]

charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"

# Function to generate all possible 4-byte sequences
def generate_4_byte_sequences():
    for sequence in itertools.product(charset, repeat=4):
        yield bytes(''.join(sequence), 'utf-8')  # Joining characters and converting to bytes

# Function to find the original flag chunks
def find_flag_chunks(hashes):
    found_chunks = []
    total_hashes = len(hashes)
    
    for i, h in enumerate(hashes):
        # Calculate and print the progress percentage
        progress = (i + 1) / total_hashes * 100
        print(f"\rProcessing hash {i+1}/{total_hashes} ({progress:.2f}%)", end='', flush=True)

        for seq in generate_4_byte_sequences():
            # Check if the hash matches
            if int(hashlib.sha256(seq).hexdigest(), 16) == h:
                print(f" - Found chunk {i}: {seq.decode()}")  # Show the found chunk
                found_chunks.append(seq)
                break
    
    print()  # Move to the next line after completing the loop
    return found_chunks

# Find the original flag chunks
flag_chunks = find_flag_chunks(coeffs)

# Print the discovered flag chunks
print("Recovered Flag Chunks:")
for chunk in flag_chunks:
    print(chunk.decode())

# Rebuild the full flag from chunks
full_flag = b''.join(flag_chunks)
print("Full Flag:", full_flag.decode())
