import hashlib
import re
from itertools import product
from sage.all import *


"""
[
[102490074968136785515464905285449555777816810213568810428527212104261235004594, 83333617434192845616567795273380961636414036733866856584640402257709492844129], 
[54958236474787922591778768124173627551947787754125334141510710134074483930303, 37187494586924574867702471313282913205107870452352390455156325689780218879084], 
[111415938989585649435685563558449777911469827791200275111144781540568889940036, 40093752242604020513780007119348237167224004880864849868890671032179641753725], 
[45760297625461710882359495693298651025204431330607008926976991416095910281272, 65977190404148747601255259734368653620920919864102582195888502462797368316127], 
[25881390790851697919692512955334530089785285766463869393575799392291206448115, 90734331875606509336774384926168962657068937882462024598586201077171481065603], 
[88090192780290557441487872184947902404204541500203371403181929377599350236093, 93738845953996470101652206462416761336704343120309575716861829302602936644625], 
[26696907309168916529450895086227284138438611642787777150062585418716600841328, 95470493255094501486888255363673768099565099249127845336747919815431038827722], 
[86075593110117234293106074051870663525174716755832879590858869369672892814639, 99013401166643870868335912388777118804153488077652433648711914631967536952658], 
[91067127277365506174769849131284343632184023816962483462276706713752630029118, 30263013581786764320799680807529355615348582303530395000778922020558155029350], 
[26483037857133472556532289125329187769955835599429114320625893493752867992444, 10734334422713964830203836907874581836017890066472859074597560196491470338341], 
[12607970437315152983346091507343813376110196673848263440079847467475885122655, 60006155847161860876081810611280621526799367026753259510138775051462779708570], 
[41502989699883828663289090014764151246540397377667189068390252634397767114479, 14185725016585544262725517019398009620404699409141306605118979104860608688924], 
[37151265705874563237025276845214960392825360260686218039606503404468008626823, 77729294897035520279155308451151660196750816354182601059891246252894180365102], 
[73997147644649752784395562762952991909128940814868908786110347052103643051452, 97780925955969397195250277142802864079118037123513618989909491538038927235213], 
[19186527282901847336908930074006419375265223967373556565815758852806704018215, 114165437225214561353405615870900290118055983894721869936212705564093715628365], 
[84778184086364468002464011740515789343676800488042136232074972272796484589810, 105214274451493299352297317693455750509780354898928344726897916790173384714717], 
[84092714496197133714029506593433354861087556990758708517955771183180830864042, 15435058833634801293110741266293406017523270037230002942605874425003021174912], 
[18986317291036308562466427415898380670163132684481760477066060217760936768474, 4656575402138871897711163093140399283223244711572171429909558525470152216828], 
[12919184759339654571067451758341156096512817519832535694959343955985090689147, 28316856189823143438516397600265496462632617897207275791842302560228878932477], 
[22406865109253428502032979610006528478580474353041273653157614038759850449650, 74065161147710737166033597356745348811134581234642216678155472053218286784214], 
[19198548160562322111381744069891316925252860421456874035164542290887190285343, 33942843840491794473504644794899185154651547290872636160980524552669926832726], 
[23737901127931737417773865036020209655074473097805295520754333315412740333590, 33244127255592498854054123471236476638339554202511336004586973615155980755529], 
[34473097901627389247735049739102037830816342084998518108031401778693771269704, 8270685283856169737323025016563850829533988644155650852949413566428372418399]
]
"""


# Define the finite field and polynomial ring
F = FiniteField(2**256 - 189)
R = PolynomialRing(F, "x")
x = R.gen()

# Define the recovered polynomial `f` explicitly
f = (
    Integer(18774791113974767935258083831049304182810978727580883251496908820639185611260) * x**22
    + Integer(108925627358651051798670231757447607862382091134410260917359817864170354232444) * x**21
    + Integer(51071942681013658455449083200263464206069169496517505483819158625209273851171) * x**20
    + Integer(100873449596485744713347508884003007785168768293706905972322186297028089445232) * x**19
    + Integer(45601514538925307494340392527700261429783350140721398305658573305260297737304) * x**18
    + Integer(111508167616287683989434169643713884059294349295676232484911912910227036901285) * x**17
    + Integer(112227545970954854036912629846889579593354709118156226852479711849480673575958) * x**16
    + Integer(84265011390598280632527043819355612952334659981467779064060972830296734803422) * x**15
    + Integer(103161038860408577399560332204072285851980676644541851125160195601548983925312) * x**14
    + Integer(75603311144179746439534422663548692891926452726895260034942783355987260912687) * x**13
    + Integer(77521100120978985434706419593786233163350298278382577254397679067286173086257) * x**12
    + Integer(11729520009033325188214867673006526019653218102477850296219008915508788035258) * x**11
    + Integer(66795904469039609325835910794975648001148577841529509311011993107955283709180) * x**10
    + Integer(8931629921800862145616964572924422081881081026036615851376233336901279641648) * x**9
    + Integer(34282975895014207127858534773160547646222226100664566699431008945815322071263) * x**8
    + Integer(65520962407963427025551020328096244131901130274067821631704007961268540464428) * x**7
    + Integer(5498067165864472272776258745234846490731094170960880373569863092675033798425) * x**6
    + Integer(67563939550199034360288431494533035174249645510812847293633754734943866058912) * x**5
    + Integer(33674570313151050855337721686411654902488857439278718492667579351575677163056) * x**4
    + Integer(83450259912215960217531764734865026801063435602749733034237562628955944961215) * x**3
    + Integer(77018214370116599595706888749806056367447903350123742187778843856774465173735) * x**2
    + Integer(23410629007861697294655908711616291594323282329809105096593471582607417857188) * x
    + Integer(16795951457632967907260395488972679537699281420039600914133493294730174311338)
)

# Define hash function for a segment (4 bytes)
def H(segment):
    return int(hashlib.sha256(segment).hexdigest(), 16)

# Flag pattern to match the expected format
flag_pattern = re.compile(rb"Hero{[0-9a-zA-Z_]{90}}")

# Character set for the flag based on the example you provided
charset = b'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_'

# Generate potential flags with all combinations
potential_flags = [b"Hero{" + b''.join(flag) + b"}" for flag in product(charset, repeat=int(90))]

# Iterate over possible flags and evaluate against polynomial
for candidate in potential_flags:
    # Check flag format
    if flag_pattern.match(candidate):  
        # Create a list of hashed segments
        segments = [candidate[i:i + 4] for i in range(0, len(candidate), 4)]
        hashed_segments = [H(seg) for seg in segments]
        
        # Generate polynomial from hashed segments
        g = R(hashed_segments)
        
        # Check if the polynomial matches the recovered one
        if g == f:
            print("Recovered Flag:", candidate.decode())
            break
else:
    print("Flag not found within the search space.")




"""
Polynomial f(x): 
91356407137791927144958613770622174607926961061379368852376771002781151613901*x^23 + 
58688474918974956495962699109478986243962548972465028067725936901754910032197*x^22 + 
71177914266346294875020009514904614231152252028035180341047573071890295627281*x^21 + 
9286536496641678624961072298289256247776902880262474453231051084428770229931*x^20 + 
48478433129988933656911497337570454952912987663301800112434018755270886790086*x^19 + 
105484582062398143020926667398250530293520625898492636870365251172877956081489*x^18 + 
91842050171741174464568525719602040646922469791657773826919079592778110767648*x^17 + 
43594818259201189283635356607462328520192502107771693650896092861477784342431*x^16 + 
66681440692524165569992671994842901187406728987456386756946647843877275534778*x^15 + 
7092396080272228853132842491037895182885372693653833621714864119915575351959*x^14 + 
115533839068795212658451397535765278473898133068309149603041276877934373391258*x^13 + 
32403908412257070302225532346590438994349383666861558172214850130936584778364*x^12 + 
15596341609452054024790211046165535925702287406391095849367220616094959319247*x^11 + 
98676420105970876355731743378079563095438931888109560800924537433679751968410*x^10 + 
4587316730151077745530345853110346550953429707066041958662730783235705675823*x^9 + 
4244268215373067710299345981438357655695365045434952475766578691548900068884*x^8 + 
78645989056858155953548111309497253790838184388240819797824701948971210482613*x^7 + 
10009681240064642703458239750230614173777134131788316383198404412696086812123*x^6 + 
16605552275238206773988750913306730384585706182539455749829662274657349564685*x^5 + 
42828444749577646348433379946210116268681295505955485156998041972023283883825*x^4 + 
78252810134582863205690878209501272813895928209727562041762503202357420752872*x^3 + 
54922548012150305957596790093591596584466927559339793497872781061995644787934*x^2 + 
37382279584575671665412736907293996338695993273870192478675632069138612724862*x + 
51862623363251592162508517414206794722184767070638202339849823866691337237984


Coefficients of f(x): [51862623363251592162508517414206794722184767070638202339849823866691337237984, 37382279584575671665412736907293996338695993273870192478675632069138612724862, 54922548012150305957596790093591596584466927559339793497872781061995644787934, 78252810134582863205690878209501272813895928209727562041762503202357420752872, 42828444749577646348433379946210116268681295505955485156998041972023283883825, 16605552275238206773988750913306730384585706182539455749829662274657349564685, 10009681240064642703458239750230614173777134131788316383198404412696086812123, 78645989056858155953548111309497253790838184388240819797824701948971210482613, 4244268215373067710299345981438357655695365045434952475766578691548900068884, 4587316730151077745530345853110346550953429707066041958662730783235705675823, 98676420105970876355731743378079563095438931888109560800924537433679751968410, 15596341609452054024790211046165535925702287406391095849367220616094959319247, 32403908412257070302225532346590438994349383666861558172214850130936584778364, 115533839068795212658451397535765278473898133068309149603041276877934373391258, 7092396080272228853132842491037895182885372693653833621714864119915575351959, 66681440692524165569992671994842901187406728987456386756946647843877275534778, 43594818259201189283635356607462328520192502107771693650896092861477784342431, 91842050171741174464568525719602040646922469791657773826919079592778110767648, 105484582062398143020926667398250530293520625898492636870365251172877956081489, 48478433129988933656911497337570454952912987663301800112434018755270886790086, 9286536496641678624961072298289256247776902880262474453231051084428770229931, 71177914266346294875020009514904614231152252028035180341047573071890295627281, 58688474918974956495962699109478986243962548972465028067725936901754910032197, 91356407137791927144958613770622174607926961061379368852376771002781151613901]
"""