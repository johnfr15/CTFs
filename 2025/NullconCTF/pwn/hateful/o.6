[4mOBJDUMP[24m(1)                                                                      GNU Development Tools                                                                     [4mOBJDUMP[24m(1)

[1mNAME[0m
       objdump - display information from object files

[1mSYNOPSIS[0m
       objdump [[1m-a[22m|[1m--archive-headers[22m]
               [[1m-b [4m[22mbfdname[24m|[1m--target=[4m[22mbfdname[24m]
               [[1m-C[22m|[1m--demangle[22m[=[4mstyle[24m] ]
               [[1m-d[22m|[1m--disassemble[22m[=[4msymbol[24m]]
               [[1m-D[22m|[1m--disassemble-all[22m]
               [[1m-z[22m|[1m--disassemble-zeroes[22m]
               [[1m-EB[22m|[1m-EL[22m|[1m--endian=[22m{big | little }]
               [[1m-f[22m|[1m--file-headers[22m]
               [[1m-F[22m|[1m--file-offsets[22m]
               [[1m--file-start-context[22m]
               [[1m-g[22m|[1m--debugging[22m]
               [[1m-e[22m|[1m--debugging-tags[22m]
               [[1m-h[22m|[1m--section-headers[22m|[1m--headers[22m]
               [[1m-i[22m|[1m--info[22m]
               [[1m-j [4m[22msection[24m|[1m--section=[4m[22msection[24m]
               [[1m-l[22m|[1m--line-numbers[22m]
               [[1m-S[22m|[1m--source[22m]
               [[1m--source-comment[22m[=[4mtext[24m]]
               [[1m-m [4m[22mmachine[24m|[1m--architecture=[4m[22mmachine[24m]
               [[1m-M [4m[22moptions[24m|[1m--disassembler-options=[4m[22moptions[24m]
               [[1m-p[22m|[1m--private-headers[22m]
               [[1m-P [4m[22moptions[24m|[1m--private=[4m[22moptions[24m]
               [[1m-r[22m|[1m--reloc[22m]
               [[1m-R[22m|[1m--dynamic-reloc[22m]
               [[1m-s[22m|[1m--full-contents[22m]
               [[1m-Z[22m|[1m--decompress[22m]
               [[1m-W[lLiaprmfFsoORtUuTgAck][22m|
                [1m--dwarf[22m[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links]]
               [[1m-WK[22m|[1m--dwarf=follow-links[22m]
               [[1m-WN[22m|[1m--dwarf=no-follow-links[22m]
               [[1m-wD[22m|[1m--dwarf=use-debuginfod[22m]
               [[1m-wE[22m|[1m--dwarf=do-not-use-debuginfod[22m]
               [[1m-L[22m|[1m--process-links[22m]
               [[1m--ctf=[4m[22msection[24m]
               [[1m--sframe=[4m[22msection[24m]
               [[1m-G[22m|[1m--stabs[22m]
               [[1m-t[22m|[1m--syms[22m]
               [[1m-T[22m|[1m--dynamic-syms[22m]
               [[1m-x[22m|[1m--all-headers[22m]
               [[1m-w[22m|[1m--wide[22m]
               [[1m--start-address=[4m[22maddress[24m]
               [[1m--stop-address=[4m[22maddress[24m]
               [[1m--no-addresses[22m]
               [[1m--prefix-addresses[22m]
               [[1m--[no-]show-raw-insn[22m]
               [[1m--adjust-vma=[4m[22moffset[24m]
               [[1m--show-all-symbols[22m]
               [[1m--dwarf-depth=[4m[22mn[24m]
               [[1m--dwarf-start=[4m[22mn[24m]
               [[1m--ctf-parent=[4m[22msection[24m]
               [[1m--no-recurse-limit[22m|[1m--recurse-limit[22m]
               [[1m--special-syms[22m]
               [[1m--prefix=[4m[22mprefix[24m]
               [[1m--prefix-strip=[4m[22mlevel[24m]
               [[1m--insn-width=[4m[22mwidth[24m]
               [[1m--visualize-jumps[=color|=extended-color|=off][0m
               [[1m--disassembler-color=[off|terminal|on|extended][0m
               [[1m-U [4m[22mmethod[24m] [[1m--unicode=[4m[22mmethod[24m]
               [[1m-V[22m|[1m--version[22m]
               [[1m-H[22m|[1m--help[22m]
               [4mobjfile[24m...

[1mDESCRIPTION[0m
       [1mobjdump [22mdisplays information about one or more object files.  The options control what particular information to display.  This information is mostly useful to programmers
       who are working on the compilation tools, as opposed to programmers who just want their program to compile and work.

       [4mobjfile[24m... are the object files to be examined.  When you specify archives, [1mobjdump [22mshows information on each of the member object files.

[1mOPTIONS[0m
       The long and short forms of options, shown here as alternatives, are equivalent.  At least one option from the list [1m-a,-d,-D,-e,-f,-g,-G,-h,-H,-p,-P,-r,-R,-s,-S,-t,-T,-V,-x[0m
       must be given.

       [1m-a[0m
       [1m--archive-header[0m
           If  any  of  the  [4mobjfile[24m  files are archives, display the archive header information (in a format similar to [1mls -l[22m).  Besides the information you could list with [1mar tv[22m,
           [1mobjdump -a [22mshows the object file format of each archive member.

       [1m--adjust-vma=[4m[22moffset[0m
           When dumping information, first add [4moffset[24m to all the section addresses.  This is useful if the section addresses do not correspond to the symbol table, which can happen
           when putting sections at particular addresses when using a format which can not represent section addresses, such as a.out.

       [1m-b [4m[22mbfdname[0m
       [1m--target=[4m[22mbfdname[0m
           Specify that the object-code format for the object files is [4mbfdname[24m.  This option may not be necessary; [4mobjdump[24m can automatically recognize many formats.

           For example,

                   objdump -b oasys -m vax -h fu.o

           displays summary information from the section headers ([1m-h[22m) of [4mfu.o[24m, which is explicitly identified ([1m-m[22m) as a VAX object file in the format produced by  Oasys  compilers.
           You can list the formats available with the [1m-i [22moption.

       [1m-C[0m
       [1m--demangle[=[4m[22mstyle[24m[1m][0m
           Decode ([4mdemangle[24m) low-level symbol names into user-level names.  Besides removing any initial underscore prepended by the system, this makes C++ function names readable.
           Different compilers have different mangling styles. The optional demangling style argument can be used to choose an appropriate demangling style for your compiler.

       [1m--recurse-limit[0m
       [1m--no-recurse-limit[0m
       [1m--recursion-limit[0m
       [1m--no-recursion-limit[0m
           Enables  or disables a limit on the amount of recursion performed whilst demangling strings.  Since the name mangling formats allow for an infinite level of recursion it
           is possible to create strings whose decoding will exhaust the amount of stack space available on the host machine, triggering a memory fault.  The limit tries to prevent
           this from happening by restricting recursion to 2048 levels of nesting.

           The default is for this limit to be enabled, but disabling it may be necessary in order to demangle truly complicated names.  Note however that if the recursion limit is
           disabled then stack exhaustion is possible and any bug reports about such an event will be rejected.

       [1m-g[0m
       [1m--debugging[0m
           Display debugging information.  This attempts to parse STABS debugging format information stored in the file and print it out  using  a  C  like  syntax.   If  no  STABS
           debugging was found this option falls back on the [1m-W [22moption to print any DWARF information in the file.

       [1m-e[0m
       [1m--debugging-tags[0m
           Like [1m-g[22m, but the information is generated in a format compatible with ctags tool.

       [1m-d[0m
       [1m--disassemble[0m
       [1m--disassemble=[4m[22msymbol[0m
           Display  the  assembler  mnemonics  for  the  machine  instructions  from  the  input  file.   This option only disassembles those sections which are expected to contain
           instructions.  If the optional [4msymbol[24m argument is given, then display the assembler mnemonics starting at [4msymbol[24m.  If [4msymbol[24m is a function  name  then  disassembly  will
           stop at the end of the function, otherwise it will stop when the next symbol is encountered.  If there are no matches for [4msymbol[24m then nothing will be displayed.

           Note if the [1m--dwarf=follow-links [22moption is enabled then any symbol tables in linked debug info files will be read in and used when disassembling.

       [1m-D[0m
       [1m--disassemble-all[0m
           Like [1m-d[22m, but disassemble the contents of all non-empty non-bss sections, not just those expected to contain instructions.  [1m-j [22mmay be used to select specific sections.

           This  option also has a subtle effect on the disassembly of instructions in code sections.  When option [1m-d [22mis in effect objdump will assume that any symbols present in a
           code section occur on the boundary between instructions and it will refuse to disassemble across such a boundary.  When option [1m-D [22mis in effect however this assumption is
           supressed.  This means that it is possible for the output of [1m-d [22mand [1m-D [22mto differ if, for example, data is stored in code sections.

           If the target is an ARM architecture this switch also has the effect of forcing the disassembler to decode pieces of  data  found  in  code  sections  as  if  they  were
           instructions.

           Note if the [1m--dwarf=follow-links [22moption is enabled then any symbol tables in linked debug info files will be read in and used when disassembling.

       [1m--no-addresses[0m
           When  disassembling,  don't  print addresses on each line or for symbols and relocation offsets.  In combination with [1m--no-show-raw-insn [22mthis may be useful for comparing
           compiler output.

       [1m--prefix-addresses[0m
           When disassembling, print the complete address on each line.  This is the older disassembly format.

       [1m-EB[0m
       [1m-EL[0m
       [1m--endian={big|little}[0m
           Specify the endianness of the object files.  This only affects disassembly.  This can be useful when disassembling a file  format  which  does  not  describe  endianness
           information, such as S-records.

       [1m-f[0m
       [1m--file-headers[0m
           Display summary information from the overall header of each of the [4mobjfile[24m files.

       [1m-F[0m
       [1m--file-offsets[0m
           When disassembling sections, whenever a symbol is displayed, also display the file offset of the region of data that is about to be dumped.  If zeroes are being skipped,
           then when disassembly resumes, tell the user how many zeroes were skipped and the file offset of the location from where the disassembly resumes.  When dumping sections,
           display the file offset of the location from where the dump starts.

       [1m--file-start-context[0m
           Specify that when displaying interlisted source code/disassembly (assumes [1m-S[22m) from a file that has not yet been displayed, extend the context to the start of the file.

       [1m-h[0m
       [1m--section-headers[0m
       [1m--headers[0m
           Display summary information from the section headers of the object file.

           File  segments  may  be  relocated to nonstandard addresses, for example by using the [1m-Ttext[22m, [1m-Tdata[22m, or [1m-Tbss [22moptions to [1mld[22m.  However, some object file formats, such as
           a.out, do not store the starting address of the file segments.  In those situations, although [1mld [22mrelocates the sections correctly, using [1mobjdump  -h  [22mto  list  the  file
           section headers cannot show the correct addresses.  Instead, it shows the usual addresses, which are implicit for the target.

           Note,  in  some  cases  it  is  possible for a section to have both the READONLY and the NOREAD attributes set.  In such cases the NOREAD attribute takes precedence, but
           [1mobjdump [22mwill report both since the exact setting of the flag bits might be important.

       [1m-H[0m
       [1m--help[0m
           Print a summary of the options to [1mobjdump [22mand exit.

       [1m-i[0m
       [1m--info[0m
           Display a list showing all architectures and object formats available for specification with [1m-b [22mor [1m-m[22m.

       [1m-j [4m[22mname[0m
       [1m--section=[4m[22mname[0m
           Display information for section [4mname[24m.  This option may be specified multiple times.

       [1m-L[0m
       [1m--process-links[0m
           Display the contents of non-debug sections found in separate debuginfo files that are linked to the main file.  This option automatically implies  the  [1m-WK  [22moption,  and
           only sections requested by other command line options will be displayed.

       [1m-l[0m
       [1m--line-numbers[0m
           Label  the display (using debugging information) with the filename and source line numbers corresponding to the object code or relocs shown.  Only useful with [1m-d[22m, [1m-D[22m, or
           [1m-r[22m.

       [1m-m [4m[22mmachine[0m
       [1m--architecture=[4m[22mmachine[0m
           Specify the architecture to use when disassembling object files.  This can be useful when disassembling object files which do not describe architecture information, such
           as S-records.  You can list the available architectures with the [1m-i [22moption.

           For most architectures it is possible to supply an architecture name and a machine name, separated by a colon.  For example [1mfoo:bar [22mwould refer to the [1mbar  [22mmachine  type
           in the [1mfoo [22marchitecture.  This can be helpful if objdump has been configured to support multiple architectures.

           If  the  target  is an ARM architecture then this switch has an additional effect.  It restricts the disassembly to only those instructions supported by the architecture
           specified by [4mmachine[24m.  If it is necessary to use this switch because the input file does not contain any architecture information, but it is also desired to  disassemble
           all the instructions use [1m-marm[22m.

       [1m-M [4m[22moptions[0m
       [1m--disassembler-options=[4m[22moptions[0m
           Pass  target specific information to the disassembler.  Only supported on some targets.  If it is necessary to specify more than one disassembler option then multiple [1m-M[0m
           options can be used or can be placed together into a comma separated list.

           For ARC, [1mdsp [22mcontrols the printing of DSP instructions, [1mspfp [22mselects the printing of FPX single precision FP instructions,  [1mdpfp  [22mselects  the  printing  of  FPX  double
           precision  FP  instructions, [1mquarkse_em [22mselects the printing of special QuarkSE-EM instructions, [1mfpuda [22mselects the printing of double precision assist instructions, [1mfpus[0m
           selects the printing of FPU single precision FP instructions, while [1mfpud [22mselects the printing of FPU double precision FP instructions.  Additionally, one can  choose  to
           have all the immediates printed in hexadecimal using [1mhex[22m.  By default, the short immediates are printed using the decimal representation, while the long immediate values
           are printed as hexadecimal.

           [1mcpu=...  [22mallows  one to enforce a particular ISA when disassembling instructions, overriding the [1m-m [22mvalue or whatever is in the ELF file.  This might be useful to select
           ARC EM or HS ISA, because architecture is same for those and disassembler relies on private ELF header data to decide if code is for EM or  HS.   This  option  might  be
           specified multiple times - only the latest value will be used.  Valid values are same as for the assembler [1m-mcpu=... [22moption.

           If  the  target  is  an  ARM  architecture  then this switch can be used to select which register name set is used during disassembler.  Specifying [1m-M reg-names-std [22m(the
           default) will select the register names as used in ARM's instruction set documentation, but with register 13 called 'sp', register 14 called 'lr' and register 15  called
           'pc'.   Specifying [1m-M reg-names-apcs [22mwill select the name set used by the ARM Procedure Call Standard, whilst specifying [1m-M reg-names-raw [22mwill just use [1mr [22mfollowed by the
           register number.

           There are also two variants on the APCS register naming scheme enabled by [1m-M reg-names-atpcs [22mand [1m-M  reg-names-special-atpcs  [22mwhich  use  the  ARM/Thumb  Procedure  Call
           Standard naming conventions.  (Either with the normal register names or the special register names).

           This  option  can  also  be  used  for  ARM  architectures  to  force  the  disassembler  to  interpret  all  instructions  as  Thumb  instructions  by  using the switch
           [1m--disassembler-options=force-thumb[22m.  This can be useful when attempting to disassemble thumb code produced by other compilers.

           For AArch64 targets this switch can be used to set whether instructions are disassembled as the most general instruction  using  the  [1m-M  no-aliases  [22moption  or  whether
           instruction notes should be generated as comments in the disasssembly using [1m-M notes[22m.

           For the x86, some of the options duplicate functions of the [1m-m [22mswitch, but allow finer grained control.

           "x86-64"
           "i386"
           "i8086"
               Select disassembly for the given architecture.

           "intel"
           "att"
               Select between intel syntax mode and AT&T syntax mode.

           "amd64"
           "intel64"
               Select between AMD64 ISA and Intel64 ISA.

           "intel-mnemonic"
           "att-mnemonic"
               Select between intel mnemonic mode and AT&T mnemonic mode.  Note: "intel-mnemonic" implies "intel" and "att-mnemonic" implies "att".

           "addr64"
           "addr32"
           "addr16"
           "data32"
           "data16"
               Specify the default address size and operand size.  These five options will be overridden if "x86-64", "i386" or "i8086" appear later in the option string.

           "suffix"
               When  in AT&T mode and also for a limited set of instructions when in Intel mode, instructs the disassembler to print a mnemonic suffix even when the suffix could be
               inferred by the operands or, for certain instructions, the execution mode's defaults.

           For PowerPC, the [1m-M [22margument [1mraw [22mselects disasssembly of hardware insns rather than aliases.  For example, you will see "rlwinm" rather than "clrlwi", and "addi"  rather
           than "li".  All of the [1m-m [22marguments for [1mgas [22mthat select a CPU are supported.  These are: [1m403[22m, [1m405[22m, [1m440[22m, [1m464[22m, [1m476[22m, [1m601[22m, [1m603[22m, [1m604[22m, [1m620[22m, [1m7400[22m, [1m7410[22m, [1m7450[22m, [1m7455[22m, [1m750cl[22m, [1m821[22m,
           [1m850[22m,  [1m860[22m,  [1ma2[22m,  [1mbooke[22m,  [1mbooke32[22m,  [1mcell[22m,  [1mcom[22m,  [1me200z2[22m,  [1me200z4[22m, [1me300[22m, [1me500[22m, [1me500mc[22m, [1me500mc64[22m, [1me500x2[22m, [1me5500[22m, [1me6500[22m, [1mefs[22m, [1mpower4[22m, [1mpower5[22m, [1mpower6[22m, [1mpower7[22m, [1mpower8[22m, [1mpower9[22m,
           [1mpower10[22m, [1mpower11[22m, [1mppc[22m, [1mppc32[22m, [1mppc64[22m, [1mppc64bridge[22m, [1mppcps[22m, [1mpwr[22m, [1mpwr2[22m, [1mpwr4[22m, [1mpwr5[22m, [1mpwr5x[22m, [1mpwr6[22m, [1mpwr7[22m, [1mpwr8[22m, [1mpwr9[22m, [1mpwr10[22m, [1mpwr11[22m, [1mpwrx[22m, [1mtitan[22m, [1mvle[22m, and  [1mfuture[22m.   [1m32  [22mand  [1m64[0m
           modify  the default or a prior CPU selection, disabling and enabling 64-bit insns respectively.  In addition, [1maltivec[22m, [1many[22m, [1mlsp[22m, [1mhtm[22m, [1mvsx[22m, [1mspe [22mand  [1mspe2 [22madd capabilities
           to a previous [4mor[24m [4mlater[24m CPU selection.  [1many [22mwill disassemble any opcode known to binutils, but in cases where an opcode has two different meanings or different arguments,
           you may not see the disassembly you expect.  If you disassemble without giving a CPU selection, a default will be chosen from information gleaned by BFD from the  object
           files headers, but the result again may not be as you expect.

           For MIPS, this option controls the printing of instruction mnemonic names and register names in disassembled instructions.  Multiple selections from the following may be
           specified as a comma separated string, and invalid options are ignored:

           "no-aliases"
               Print the 'raw' instruction mnemonic instead of some pseudo instruction mnemonic.  I.e., print 'daddu' or 'or' instead of 'move', 'sll' instead of 'nop', etc.

           "msa"
               Disassemble MSA instructions.

           "virt"
               Disassemble the virtualization ASE instructions.

           "xpa"
               Disassemble the eXtended Physical Address (XPA) ASE instructions.

           "gpr-names=[4mABI[24m"
               Print  GPR  (general-purpose  register)  names  as  appropriate  for  the specified ABI.  By default, GPR names are selected according to the ABI of the binary being
               disassembled.

           "fpr-names=[4mABI[24m"
               Print FPR (floating-point register) names as appropriate for the specified ABI.  By default, FPR numbers are printed rather than names.

           "cp0-names=[4mARCH[24m"
               Print CP0 (system control coprocessor; coprocessor 0) register names as appropriate for the CPU or architecture specified by [4mARCH[24m.  By default,  CP0  register  names
               are selected according to the architecture and CPU of the binary being disassembled.

           "hwr-names=[4mARCH[24m"
               Print  HWR  (hardware  register,  used  by  the  "rdhwr"  instruction) names as appropriate for the CPU or architecture specified by [4mARCH[24m.  By default, HWR names are
               selected according to the architecture and CPU of the binary being disassembled.

           "reg-names=[4mABI[24m"
               Print GPR and FPR names as appropriate for the selected ABI.

           "reg-names=[4mARCH[24m"
               Print CPU-specific register names (CP0 register and HWR names) as appropriate for the selected CPU or architecture.

           For any of the options listed above, [4mABI[24m or [4mARCH[24m may be specified as [1mnumeric [22mto have numbers printed rather than names, for the selected types  of  registers.   You  can
           list the available values of [4mABI[24m and [4mARCH[24m using the [1m--help [22moption.

           For  VAX,  you  can  specify function entry addresses with [1m-M entry:0xf00ba[22m.  You can use this multiple times to properly disassemble VAX binary files that don't contain
           symbol tables (like ROM dumps).  In these cases, the function entry mask would otherwise be decoded as VAX instructions, which  would  probably  lead  the  rest  of  the
           function being wrongly disassembled.

       [1m-p[0m
       [1m--private-headers[0m
           Print  information  that  is  specific  to  the object file format.  The exact information printed depends upon the object file format.  For some object file formats, no
           additional information is printed.

       [1m-P [4m[22moptions[0m
       [1m--private=[4m[22moptions[0m
           Print information that is specific to the object file format.  The argument [4moptions[24m is a comma separated list that depends  on  the  format  (the  lists  of  options  is
           displayed with the help).

           For XCOFF, the available options are:

           "header"
           "aout"
           "sections"
           "syms"
           "relocs"
           "lineno,"
           "loader"
           "except"
           "typchk"
           "traceback"
           "toc"
           "ldinfo"

           For PE, the available options are:

           "header"
           "sections"

           Not all object formats support this option.  In particular the ELF format does not use it.

       [1m-r[0m
       [1m--reloc[0m
           Print the relocation entries of the file.  If used with [1m-d [22mor [1m-D[22m, the relocations are printed interspersed with the disassembly.

       [1m-R[0m
       [1m--dynamic-reloc[0m
           Print the dynamic relocation entries of the file.  This is only meaningful for dynamic objects, such as certain types of shared libraries.  As for [1m-r[22m, if used with [1m-d [22mor
           [1m-D[22m, the relocations are printed interspersed with the disassembly.

       [1m-s[0m
       [1m--full-contents[0m
           Display  the  full  contents  of  sections, often used in combination with [1m-j [22mto request specific sections.  By default all non-empty non-bss sections are displayed.  By
           default any compressed section will be displayed in its compressed form.  In order to see the contents in a decompressed form add the [1m-Z [22moption to the command line.

       [1m-S[0m
       [1m--source[0m
           Display source code intermixed with disassembly, if possible.  Implies [1m-d[22m.

       [1m--show-all-symbols[0m
           When disassembling, show all the symbols that match a given address, not just the first one.

       [1m--source-comment[=[4m[22mtxt[24m[1m][0m
           Like the [1m-S [22moption, but all source code lines are displayed with a prefix of [4mtxt[24m.  Typically [4mtxt[24m will be a comment string which can be used to distinguish the  assembler
           code from the source code.  If [4mtxt[24m is not provided then a default string of [4m"#[24m [4m"[24m (hash followed by a space), will be used.

       [1m--prefix=[4m[22mprefix[0m
           Specify [4mprefix[24m to add to the absolute paths when used with [1m-S[22m.

       [1m--prefix-strip=[4m[22mlevel[0m
           Indicate how many initial directory names to strip off the hardwired absolute paths. It has no effect without [1m--prefix=[4m[22mprefix[24m.

       [1m--show-raw-insn[0m
           When disassembling instructions, print the instruction in hex as well as in symbolic form.  This is the default except when [1m--prefix-addresses [22mis used.

       [1m--no-show-raw-insn[0m
           When disassembling instructions, do not print the instruction bytes.  This is the default when [1m--prefix-addresses [22mis used.

       [1m--insn-width=[4m[22mwidth[0m
           Display [4mwidth[24m bytes on a single line when disassembling instructions.

       [1m--visualize-jumps[=color|=extended-color|=off][0m
           Visualize  jumps  that  stay  inside a function by drawing ASCII art between the start and target addresses.  The optional [1m=color [22margument adds color to the output using
           simple terminal colors.  Alternatively the [1m=extended-color [22margument will add color using 8bit colors, but these might not work on all terminals.

           If it is necessary to disable the [1mvisualize-jumps [22moption after it has previously been enabled then use [1mvisualize-jumps=off[22m.

       [1m--disassembler-color=off[0m
       [1m--disassembler-color=terminal[0m
       [1m--disassembler-color=on|color|colour[0m
       [1m--disassembler-color=extened|extended-color|extened-colour[0m
           Enables or disables the use of colored syntax highlighting in disassembly output.  The default behaviour is determined via  a  configure  time  option.   Note,  not  all
           architectures support colored syntax highlighting, and depending upon the terminal used, colored output may not actually be legible.

           The [1mon [22margument adds colors using simple terminal colors.

           The [1mterminal [22margument does the same, but only if the output device is a terminal.

           The [1mextended-color [22margument is similar to the [1mon [22margument, but it uses 8-bit colors.  These may not work on all terminals.

           The [1moff [22margument disables colored disassembly.

       [1m-W[lLiaprmfFsoORtUuTgAckK][0m
       [1m--dwarf[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links][0m
           Displays  the  contents  of the DWARF debug sections in the file, if any are present.  Compressed debug sections are automatically decompressed (temporarily) before they
           are displayed.  If one or more of the optional letters or words follows the switch then only those type(s) of data will be dumped.  The letters and words  refer  to  the
           following information:

           "a"
           "=abbrev"
               Displays the contents of the [1m.debug_abbrev [22msection.

           "A"
           "=addr"
               Displays the contents of the [1m.debug_addr [22msection.

           "c"
           "=cu_index"
               Displays the contents of the [1m.debug_cu_index [22mand/or [1m.debug_tu_index [22msections.

           "f"
           "=frames"
               Display the raw contents of a [1m.debug_frame [22msection.

           "F"
           "=frames-interp"
               Display the interpreted contents of a [1m.debug_frame [22msection.

           "g"
           "=gdb_index"
               Displays the contents of the [1m.gdb_index [22mand/or [1m.debug_names [22msections.

           "i"
           "=info"
               Displays  the  contents  of  the  [1m.debug_info  [22msection.   Note:  the output from this option can also be restricted by the use of the [1m--dwarf-depth [22mand [1m--dwarf-start[0m
               options.

           "k"
           "=links"
               Displays the contents of the [1m.gnu_debuglink[22m, [1m.gnu_debugaltlink [22mand [1m.debug_sup [22msections, if any of them are present.  Also displays any links to separate dwarf object
               files (dwo), if they are specified by the DW_AT_GNU_dwo_name or DW_AT_dwo_name attributes in the [1m.debug_info [22msection.

           "K"
           "=follow-links"
               Display the contents of any selected debug sections that are found in linked, separate debug info file(s).  This can result in multiple versions of  the  same  debug
               section being displayed if it exists in more than one file.

               In addition, when displaying DWARF attributes, if a form is found that references the separate debug info file, then the referenced contents will also be displayed.

               Note  - in some distributions this option is enabled by default.  It can be disabled via the [1mN [22mdebug option.  The default can be chosen when configuring the binutils
               via the [1m--enable-follow-debug-links=yes [22mor [1m--enable-follow-debug-links=no [22moptions.  If these are not used then the default is to enable the following of debug links.

               Note - if support for the debuginfod protocol was enabled when the binutils were built then this option will also  include  an  attempt  to  contact  any  debuginfod
               servers  mentioned in the [4mDEBUGINFOD_URLS[24m environment variable.  This could take some time to resolve.  This behaviour can be disabled via the [1m=do-not-use-debuginfod[0m
               debug option.

           "N"
           "=no-follow-links"
               Disables the following of links to separate debug info files.

           "D"
           "=use-debuginfod"
               Enables contacting debuginfod servers if there is a need to follow debug links.  This is the default behaviour.

           "E"
           "=do-not-use-debuginfod"
               Disables contacting debuginfod servers when there is a need to follow debug links.

           "l"
           "=rawline"
               Displays the contents of the [1m.debug_line [22msection in a raw format.

           "L"
           "=decodedline"
               Displays the interpreted contents of the [1m.debug_line [22msection.

           "m"
           "=macro"
               Displays the contents of the [1m.debug_macro [22mand/or [1m.debug_macinfo [22msections.

           "o"
           "=loc"
               Displays the contents of the [1m.debug_loc [22mand/or [1m.debug_loclists [22msections.

           "O"
           "=str-offsets"
               Displays the contents of the [1m.debug_str_offsets [22msection.

           "p"
           "=pubnames"
               Displays the contents of the [1m.debug_pubnames [22mand/or [1m.debug_gnu_pubnames [22msections.

           "r"
           "=aranges"
               Displays the contents of the [1m.debug_aranges [22msection.

           "R"
           "=Ranges"
               Displays the contents of the [1m.debug_ranges [22mand/or [1m.debug_rnglists [22msections.

           "s"
           "=str"
               Displays the contents of the [1m.debug_str[22m, [1m.debug_line_str [22mand/or [1m.debug_str_offsets [22msections.

           "t"
           "=pubtype"
               Displays the contents of the [1m.debug_pubtypes [22mand/or [1m.debug_gnu_pubtypes [22msections.

           "T"
           "=trace_aranges"
               Displays the contents of the [1m.trace_aranges [22msection.

           "u"
           "=trace_abbrev"
               Displays the contents of the [1m.trace_abbrev [22msection.

           "U"
           "=trace_info"
               Displays the contents of the [1m.trace_info [22msection.

           Note: displaying the contents of [1m.debug_static_funcs[22m, [1m.debug_static_vars [22mand [1mdebug_weaknames [22msections is not currently supported.

       [1m--dwarf-depth=[4m[22mn[0m
           Limit the dump of the ".debug_info" section to [4mn[24m children.  This is only useful with [1m--debug-dump=info[22m.  The default is to print all DIEs; the special value 0 for [4mn[24m will
           also have this effect.

           With a non-zero value for [4mn[24m, DIEs at or deeper than [4mn[24m levels will not be printed.  The range for [4mn[24m is zero-based.

       [1m--dwarf-start=[4m[22mn[0m
           Print only DIEs beginning with the DIE numbered [4mn[24m.  This is only useful with [1m--debug-dump=info[22m.

           If specified, this option will suppress printing of any header information and all DIEs before the DIE numbered [4mn[24m.  Only siblings and children of the specified DIE  will
           be printed.

           This can be used in conjunction with [1m--dwarf-depth[22m.

       [1m--dwarf-check[0m
           Enable additional checks for consistency of Dwarf information.

       [1m--ctf[=[4m[22msection[24m[1m][0m
           Display the contents of the specified CTF section.  CTF sections themselves contain many subsections, all of which are displayed in order.

           By default, display the name of the section named [4m.ctf[24m, which is the name emitted by [1mld[22m.

       [1m--ctf-parent=[4m[22mmember[0m
           If  the CTF section contains ambiguously-defined types, it will consist of an archive of many CTF dictionaries, all inheriting from one dictionary containing unambiguous
           types.  This member is by default named [4m.ctf[24m, like the section containing it, but it is possible to change this name using the "ctf_link_set_memb_name_changer"  function
           at  link  time.  When looking at CTF archives that have been created by a linker that uses the name changer to rename the parent archive member, [1m--ctf-parent [22mcan be used
           to specify the name used for the parent.

       [1m--sframe[=[4m[22msection[24m[1m][0m
           Display the contents of the specified SFrame section.

           By default, display the name of the section named [4m.sframe[24m, which is the name emitted by [1mld[22m.

       [1m-G[0m
       [1m--stabs[0m
           Display the full contents of any sections requested.  Display the contents of the .stab and .stab.index and .stab.excl sections from an ELF file.  This is only useful on
           systems (such as Solaris 2.0) in which ".stab" debugging symbol-table entries are carried in an ELF section.  In most other file formats, debugging symbol-table  entries
           are interleaved with linkage symbols, and are visible in the [1m--syms [22moutput.

       [1m--start-address=[4m[22maddress[0m
           Start displaying data at the specified address.  This affects the output of the [1m-d[22m, [1m-r [22mand [1m-s [22moptions.

       [1m--stop-address=[4m[22maddress[0m
           Stop displaying data at the specified address.  This affects the output of the [1m-d[22m, [1m-r [22mand [1m-s [22moptions.

       [1m-t[0m
       [1m--syms[0m
           Print  the symbol table entries of the file.  This is similar to the information provided by the [1mnm [22mprogram, although the display format is different.  The format of the
           output depends upon the format of the file being dumped, but there are two main types.  One looks like this:

                   [  4](sec  3)(fl 0x00)(ty   0)(scl   3) (nx 1) 0x00000000 .bss
                   [  6](sec  1)(fl 0x00)(ty   0)(scl   2) (nx 0) 0x00000000 fred

           where the number inside the square brackets is the number of the entry in the symbol table, the [4msec[24m number is the section number, the [4mfl[24m  value  are  the  symbol's  flag
           bits,  the  [4mty[24m  number is the symbol's type, the [4mscl[24m number is the symbol's storage class and the [4mnx[24m value is the number of auxiliary entries associated with the symbol.
           The last two fields are the symbol's value and its name.

           The other common output format, usually seen with ELF based files, looks like this:

                   00000000 l    d  .bss   00000000 .bss
                   00000000 g       .text  00000000 fred

           Here the first number is the symbol's value (sometimes referred to as its address).  The next field is actually a set of characters and spaces indicating the  flag  bits
           that  are  set on the symbol.  These characters are described below.  Next is the section with which the symbol is associated or [4m*ABS*[24m if the section is absolute (ie not
           connected with any section), or [4m*UND*[24m if the section is referenced in the file being dumped, but not defined there.

           After the section name comes another field, a number, which for common symbols is the alignment and for  other  symbol  is  the  size.   Finally  the  symbol's  name  is
           displayed.

           The flag characters are divided into 7 groups as follows:

           "l"
           "g"
           "u"
           "!" The  symbol  is a local (l), global (g), unique global (u), neither global nor local (a space) or both global and local (!).  A symbol can be neither local or global
               for a variety of reasons, e.g., because it is used for debugging, but it is probably an indication of a bug if it is ever  both  local  and  global.   Unique  global
               symbols are a GNU extension to the standard set of ELF symbol bindings.  For such a symbol the dynamic linker will make sure that in the entire process there is just
               one symbol with this name and type in use.

           "w" The symbol is weak (w) or strong (a space).

           "C" The symbol denotes a constructor (C) or an ordinary symbol (a space).

           "W" The  symbol  is  a warning (W) or a normal symbol (a space).  A warning symbol's name is a message to be displayed if the symbol following the warning symbol is ever
               referenced.

           "I"
           "i" The symbol is an indirect reference to another symbol (I), a function to be evaluated during reloc processing (i) or a normal symbol (a space).

           "d"
           "D" The symbol is a debugging symbol (d) or a dynamic symbol (D) or a normal symbol (a space).

           "F"
           "f"
           "O" The symbol is the name of a function (F) or a file (f) or an object (O) or just a normal symbol (a space).

       [1m-T[0m
       [1m--dynamic-syms[0m
           Print the dynamic symbol table entries of the file.  This is only meaningful for dynamic objects, such as certain types of shared libraries.   This  is  similar  to  the
           information provided by the [1mnm [22mprogram when given the [1m-D [22m([1m--dynamic[22m) option.

           The  output  format  is  similar  to  that produced by the [1m--syms [22moption, except that an extra field is inserted before the symbol's name, giving the version information
           associated with the symbol.  If the version is the default version to be used when resolving unversioned references to the symbol then it's displayed  as  is,  otherwise
           it's put into parentheses.

       [1m--special-syms[0m
           When displaying symbols include those which the target considers to be special in some way and which would not normally be of interest to the user.

       [1m-U [4m[22m[d|i|l|e|x|h][0m
       [1m--unicode=[4m[22m[default|invalid|locale|escape|hex|highlight][0m
           Controls  the  display  of  UTF-8  encoded  multibyte characters in strings.  The default ([1m--unicode=default[22m) is to give them no special treatment.  The [1m--unicode=locale[0m
           option displays the sequence in the current locale, which may or may not support them.  The  options  [1m--unicode=hex  [22mand  [1m--unicode=invalid  [22mdisplay  them  as  hex  byte
           sequences enclosed by either angle brackets or curly braces.

           The  [1m--unicode=escape  [22moption  displays  them  as  escape  sequences ([4m\uxxxx[24m) and the [1m--unicode=highlight [22moption displays them as escape sequences highlighted in red (if
           supported by the output device).  The colouring is intended to draw attention to the presence of unicode sequences where they might not be expected.

       [1m-V[0m
       [1m--version[0m
           Print the version number of [1mobjdump [22mand exit.

       [1m-x[0m
       [1m--all-headers[0m
           Display all available header information, including the symbol table and relocation entries.  Using [1m-x [22mis equivalent to specifying all of [1m-a -f -h -p -r -t[22m.

       [1m-w[0m
       [1m--wide[0m
           Format some lines for output devices that have more than 80 columns.  Also do not truncate symbol names when they are displayed.

       [1m-z[0m
       [1m--disassemble-zeroes[0m
           Normally the disassembly output will skip blocks of zeroes.  This option directs the disassembler to disassemble those blocks, just like any other data.

       [1m-Z[0m
       [1m--decompress[0m
           The [1m-Z [22moption is meant to be used in conunction with the [1m-s [22moption.  It instructs [1mobjdump [22mto decompress any compressed sections before displaying their contents.

       [1m@[4m[22mfile[0m
           Read command-line options from [4mfile[24m.  The options read are inserted in place of the original @[4mfile[24m option.  If [4mfile[24m does not exist, or cannot be read,  then  the  option
           will be treated literally, and not removed.

           Options  in  [4mfile[24m  are  separated by whitespace.  A whitespace character may be included in an option by surrounding the entire option in either single or double quotes.
           Any character (including a backslash) may be included by prefixing the character to be included with a backslash.  The [4mfile[24m may itself contain additional @[4mfile[24m  options;
           any such options will be processed recursively.

[1mSEE ALSO[0m
       [1mnm[22m(1), [1mreadelf[22m(1), and the Info entries for [4mbinutils[24m.

[1mCOPYRIGHT[0m
       Copyright (c) 1991-2024 Free Software Foundation, Inc.

       Permission  is  granted  to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by
       the Free Software Foundation; with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts.  A copy of the license is included in the section entitled
       "GNU Free Documentation License".

binutils-2.42                                                                        2024-08-07                                                                           [4mOBJDUMP[24m(1)
